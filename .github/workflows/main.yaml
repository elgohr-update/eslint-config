name: main
on:
  push:
    branches:
      - master
jobs:
  main:
    name: main
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@master

    - name: Set up Node.js
      uses: actions/setup-node@master
      with:
        node-version: 14.x

    - name: Install dependencies
      run: npm ci

    - name: Configure git
      id: configure_git
      run: |
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git config user.name "$GITHUB_ACTOR"
        
    - name: Check for blueprint files
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: "package.json, blueprint.md, blueprint.json"

    - name: Build README
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        npx @appnest/readme generate
        git add .
        git diff-index --quiet HEAD || git commit -m 'Update README' && git push origin master
        
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v2
      if: ${{ env.NPM_AUTH_TOKEN }} 
      with:
        # You can specify specifying version range for the extra plugins if you prefer.
        extra_plugins: |
          @semantic-release/commit-analyzer
          @semantic-release/release-notes-generator
          @semantic-release/changelog
          @semantic-release/npm
          @semantic-release/github
          @qiwi/semantic-release-gh-pages-plugin
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Publish static site to Netlify
      uses: jsmrcaga/action-netlify-deploy@master
      if: ${{ env.NETLIFY_AUTH_TOKEN != '' && env.NETLIFY_SITE_ID != '' && env.steps.semantic.outputs.new_release_published == true }} 
      with:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_DEPLOY_MESSAGE: "Prod deploy v${{ env.steps.semantic.outputs.new_release_version }}"
        NETLIFY_DEPLOY_TO_PROD: true
        build_directory: out

    - name: Publish to Docker Hub
      uses: elgohr/Publish-Docker-Github-Action@master
      if: ${{ env.DOCKER_USERNAME != '' && env.DOCKER_USERNAME != '' && env.steps.semantic.outputs.new_release_published == true }} 
      with:
        name: ${{ env.GIT_REPO }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        buildoptions: "--compress --force-rm"
        tags: "latest,${{ env.steps.semantic.outputs.new_release_version }}"

