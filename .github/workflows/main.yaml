name: main
on:
  push:
    branches:
      - master
jobs:
  main:
    name: npm-publish
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@master

    - name: Set up Node.js
      uses: actions/setup-node@master
      with:
        node-version: 14.x

    - name: Install dependencies
      run: npm ci

    - name: Configure git
      id: configure_git
      run: |
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git config user.name "$GITHUB_ACTOR"
        
    - name: Check for blueprint files
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: "package.json, blueprint.md, blueprint.json"

    - name: Build README
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        npx @appnest/readme generate
        git add .
        git diff-index --quiet HEAD || git commit -m 'Update README'
        
    - name: Standard Version
      id: bump_version
      run: |
        if \
        { git log "$( git describe --tags --abbrev=0 )..HEAD" --format='%s' | cut -d: -f1 | sort -u | sed -e 's/([^)]*)//' | grep -q -i -E '^feat|fix|perf|refactor|revert$' ; } || \
        { git log "$( git describe --tags --abbrev=0 )..HEAD" --format='%s' | cut -d: -f1 | sort -u | sed -e 's/([^)]*)//' | grep -q -E '\!$' ; } || \
        { git log "$( git describe --tags --abbrev=0 )..HEAD" --format='%b' | grep -q -E '^BREAKING CHANGE:' ; }
        then
          npx standard-version
          git push --follow-tags origin master
          echo ::set-env name=RELEASE_VERSION::$(node -p "require('./package.json').version") 
          echo ::set-env name=NPM_ASSET::$(npm pack | tail -n 1) 
          echo ::set-env name=DID_BUMP::1
        else
          echo "No applicable changes since the previous tag..."
        fi

    - name: Publish to npm
      if: ${{ env.NPM_AUTH_TOKEN != '' && env.DID_BUMP == 1 }} 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" > ~/.npmrc
        [[ $(node -p "require('./package.json').private") == "true" ]] || npm publish

    - name: Create Release
      id: create_release
      if: ${{ env.DID_BUMP == 1 }} 
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.RELEASE_VERSION }}
        release_name: Release v${{ env.RELEASE_VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      if: ${{ env.DID_BUMP == 1 }} 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.NPM_ASSET }}
        asset_name: ${{ env.NPM_ASSET }}
        asset_content_type: application/gzip

    - name: Deploy to github pages
      if: ${{ false }} 
      uses: JamesIves/github-pages-deploy-action@3.5.7
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages # The branch the action should deploy to.
        FOLDER: out # The folder the action should deploy.

    - name: Publish static site to Netlify
      uses: jsmrcaga/action-netlify-deploy@master
      if: ${{ env.NETLIFY_AUTH_TOKEN != '' && env.NETLIFY_SITE_ID != '' && env.DID_BUMP == 1 }} 
      with:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_DEPLOY_MESSAGE: "Prod deploy v${{ github.ref }}"
        NETLIFY_DEPLOY_TO_PROD: true
        build_directory: out

    - name: Publish to Docker Hub
      uses: elgohr/Publish-Docker-Github-Action@master
      if: ${{ env.DOCKER_USERNAME != '' && env.DOCKER_USERNAME != '' && env.DID_BUMP == 1 }} 
      with:
        name: ${{ env.GIT_REPO }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        buildoptions: "--compress --force-rm"
        tags: "latest,${{ env.RELEASE_VERSION }}"

